df
# get totals
df %>%
select(actual:floor) %>%
summarise_all(funs(sum))
# get totals
df %>%
select(actual:floor) %>%
summarise_all(funs(sum)) %>%
mutate(missing = actual - floor)
# get totals
tot <-df %>%
select(actual:floor) %>%
summarise_all(funs(sum)) %>%
mutate(missing = actual - floor)
tot
tot$actual
df
sum(df$actual)
# get totals
tot <-df %>%
select(actual:floor) %>%
summarise_all(funs(sum))
tot
# get totals
df %>%
select(actual:floor) %>%
summarise_all(funs(mean))
# get totals
df %>%
select(actual:floor) %>%
summarise_all(funs(sum))
# get totals
df %>%
select(actual:floor) %>%
summarise_all(funs(sum,2))
# get totals
df %>%
select(actual:floor) %>%
summarise_all(funs(sum(.,2)))
# get totals
df %>%
select(actual:floor) %>%
summarise_all(funs(sum(,2)))
summarise_all(funs(sum)
# get totals
df %>%
# get totals
df %>%
select(actual:floor) %>%
summarise_all(funs(sum))
funs
# get totals
df %>%
select(actual:floor) %>%
summarise_all(funs(sum(.,)))
sum(1,2.3)
sum(1,2.3333)
# get totals
df %>%
select(actual:floor) %>%
summarise_all(funs(sum))
# get totals
tot<-df %>%
select(actual:floor) %>%
summarise_all(funs(sum))
sum(1,2.3333)tot
tot
View(tot)
# get totals
tot<-df %>%
select(actual:floor) %>%
summarise_all(funs(sum)) %>%
mutate(missing = actual - floor)
tot
long <- tibble(
ages = c('age_1','age_2','age_3','age_4','age_5','age_6',
'age_7','age_8','age_9','age_10'),
actual= c(5.3, 6.6, 8.3, 20.3, 25.3, 30.8, 31.3, 22.3, 18.3, 14.5)
)
df <- long %>%
mutate(
round = round(actual),
floor = floor(actual),
fraction = actual - floor(actual),
rank = row_number(desc(fraction))
)
# get totals
tot<-df %>%
select(actual:floor) %>%
summarise_all(funs(sum)) %>%
mutate(missing = actual - floor)
tot
# get totals
df %>%
select(actual:floor) %>%
summarise_all(funs(sum)) %>%
mutate(missing = actual - floor)
df
length(tot$missing)
# get totals
tot<-df %>%
select(actual:floor) %>%
summarise_all(funs(sum)) %>%
mutate(missing = actual - floor)
df %>%
mutate(adjusted = ifelse(rank<5),rank+1,rank)
df %>%
mutate(adjusted = ifelse(rank<5),rank+1,rank)
df %>%
mutate(adjusted = if_else(rank<5,rank+1,rank))
df %>%
mutate(adjusted = if_else(rank<5,1,2))
df %>%
mutate(adjusted = if_else(rank<5,rank,2))
df %>%
mutate(adjusted = ifelse(rank<5,rank,2))
df %>%
mutate(adjusted = ifelse(rank<5,floor,2))
df %>%
mutate(adjusted = ifelse(rank<5,floor+1,2))
df %>%
mutate(adjusted = ifelse(rank<5,floor+1,floor))
df %>%
mutate(adjusted = ifelse(rank<=5,floor+1,floor))
df %>%
mutate(adjusted = ifelse(rank<=tot$missing,floor+1,floor))
df %>%
mutate(adjusted = ifelse(rank<=tot$missing,floor+1,floor)) %>%
summarise(sum(adjusted))
df %>%
mutate(adjusted = ifelse(rank<=tot$missing,floor+1,floor)) %>%
summarise(whole =sum(adjusted))
tot
df %>%
mutate(adjusted = ifelse(rank<=tot$missing,floor+1,floor)) %>%
summarise(whole =sum(adjusted)) %>%
left_join(tot)
df %>%
mutate(adjusted = ifelse(rank<=tot$missing,floor+1,floor)) %>%
summarise(whole =sum(adjusted)) %>%
left_join(.,tot)
df %>%
mutate(adjusted = ifelse(rank<=tot$missing,floor+1,floor)) %>%
summarise(whole =sum(adjusted)) %>%
crossing(.,tot)
df %>%
mutate(adjusted = ifelse(rank<=tot$missing,floor+1,floor)) %>%
summarise(whole =sum(adjusted)) %>%
crossing(tot,.)
tot <- df %>%
mutate(adjusted = ifelse(rank<=tot$missing,floor+1,floor)) %>%
summarise(whole =sum(adjusted)) %>%
crossing(tot,.)
View(tot)
# display in wide format
df %>%
mutate(cols = ages) %>%
gather(type, value, -cols) %>%
filter(type != 'ages') %>%
spread(cols, value) %>%
mutate_at(vars(2:length(.)),as.numeric)
mig <- tibble(
ages = c('age_1','age_2','age_3','age_4','age_5','age_6',
'age_7','age_8','age_9','age_10'),
actual= c(1.1, 12.2, 12.8, 26.8, 32.4, 40.3, 28.4, 17.4, 13.1, 1.3)
)
mig
mig %>%
summarise(sum = sum(actual))
mig
mig %>%
summarise(sum = sum(actual), ctl = 300)
mig %>%
summarise(sum = sum(actual), ctl = 169)
mig %>%
summarise(sum = sum(actual), ctl = 169, diff = sum - ctl)
smry <- mig %>%
summarise(sum = sum(actual), ctl = 169, diff = sum - ctl)
smry
View(smry)
smry
smry$diff
smry
mig
smry <- mig %>%
summarise(sum = sum(actual), ctl = 169, diff = sum - ctl)
length(mig)
nrow(mig$actual)
nrows(mig$actual)
nrows(mig)
nrow(mig)
mig %>%
mutate(adjust = smry$diff / nrow(mig))
mig %>%
mutate(adjust = round(smry$diff / nrow(mig),2))
mig %>%
mutate(adjust = round(smry$diff / nrow(mig),1))
mig %>%
mutate(adjust = round(-smry$diff / nrow(mig),1))
mig %>%
mutate(adjust = round(smry$diff / nrow(mig),1))
mig %>%
mutate(adjust = round(-smry$diff / nrow(mig),1))
mig %>%
mutate(adjust = round(-smry$diff / nrow(mig),1),
interim = actual - adjust)
mig %>%
mutate(adjust = round(smry$diff / nrow(mig),1),
interim = actual - adjust)
mig %>%
mutate(adjust = round(-smry$diff / nrow(mig),1),
interim = actual - adjust)
runif(1,0,1)
runif(1,0,1)
## enhanced method
df <- long %>%
mutate(
round = round(actual),
floor = floor(actual),
fraction = actual - floor(actual),
random = runif(1,0,1))
df
rbinom
rbinom(1,0,1)
rbinom(1,0,1)
rbinom(1,0,1)
## enhanced method
df <- long %>%
mutate(
round = round(actual),
floor = floor(actual),
fraction = actual - floor(actual)
) %>%
rowwise() %>%
random = rnorm(0,1)
## enhanced method
df <- long %>%
mutate(
round = round(actual),
floor = floor(actual),
fraction = actual - floor(actual)
) %>%
rowwise() %>%
mutate(
random = rnorm(0,1)
)
rnorm(0,1)
rnorm(0,1)
runif(1,0,1)
## enhanced method
df <- long %>%
mutate(
round = round(actual),
floor = floor(actual),
fraction = actual - floor(actual)
) %>%
rowwise() %>%
mutate(
random = runif(1,0,1)
)
df
## enhanced method
df <- long %>%
mutate(
round = round(actual),
floor = floor(actual),
fraction = actual - floor(actual)
) %>%
rowwise() %>%
mutate(
random = fraction + runif(1,0,1)
)
df
runif(1,0.001,0.01)
runif(1,0.001,0.01)
## enhanced method
df <- long %>%
mutate(
round = round(actual),
floor = floor(actual),
fraction = actual - floor(actual)
) %>%
rowwise() %>%
mutate(
random = fraction + runif(1,0.001,0.01)
)
df
## enhanced method
df <- long %>%
mutate(
round = round(actual),
floor = floor(actual),
fraction = actual - floor(actual)
) %>%
rowwise() %>%
mutate(
random = fraction + runif(1,0.001,0.01),
rank = row_number(desc(random))
)
df
## enhanced method
df <- long %>%
mutate(
round = round(actual),
floor = floor(actual),
fraction = actual - floor(actual)
) %>%
rowwise() %>%
mutate(
random = fraction + runif(1,0.001,0.01),
rank = arrange(desc(random))
)
df
arrange(df$random)
mtcars
arrange(df,df$random)
df
row_number(df,df$random)
row_number(df$random)
row_number(desc(df$random))
## enhanced method
df <- long %>%
mutate(
round = round(actual),
floor = floor(actual),
fraction = actual - floor(actual)
) %>%
rowwise() %>%
mutate(
random = fraction + runif(1,0.001,0.01),
)  %>%
mutate(
rank = row_number(desc(random))
)
## enhanced method
df <- long %>%
mutate(
round = round(actual),
floor = floor(actual),
fraction = actual - floor(actual)
) %>%
rowwise() %>%
mutate(
random = fraction + runif(1,0.001,0.01)
)  %>%
mutate(
rank = row_number(desc(random))
)
df
## enhanced method
df <- long %>%
mutate(
round = round(actual),
floor = floor(actual),
fraction = actual - floor(actual)
) %>%
rowwise() %>%
mutate(
random = fraction + runif(1,0.001,0.01)
)
df %>%
mutate(
rank = row_number(desc(random))
)
## enhanced method
df <- long %>%
mutate(
round = round(actual),
floor = floor(actual),
fraction = actual - floor(actual)
) %>%
rowwise() %>%
mutate(
random = fraction + runif(1,0.001,0.01)
)
df
df %>%
mutate(
rank = row_number(desc(random))
)
row_number(desc(df$random))
df %>%
mutate(
rank = row_number(desc(floor))
)
df %>%
mutate(
rank = row_number(desc(random))
)
df %>%
mutate(
rank = round(desc(random))
)
df %>%
mutate(
rank = min_number(desc(random))
)
df %>%
mutate(
rank = min_rank(desc(random))
)
df %>%
mutate(
rank = percent_rank(desc(random))
)
df %>%
mutate(
rank = row_number(desc(random))
)
df %>%
mutate(
rank = row_number(desc(floor))
)
df %>%
mutate(
rank = row_number((floor))
)
## enhanced method
df <- long %>%
mutate(
round = round(actual),
floor = floor(actual),
fraction = actual - floor(actual)
) %>%
rowwise() %>%
mutate(
random = fraction + runif(1,0.001,0.01)
)
df %>%
mutate(
rank = row_number(desc(floor))
)
df %>% mutate(rank = dense_rank(desc(random)))
df %>% mutate(rank = dense_rank(desc(round)))
df %>% mutate(rank = dense_rank(desc(actual)))
## enhanced method
df <- long %>%
mutate(
round = round(actual),
floor = floor(actual),
fraction = actual - floor(actual)
)
df %>%
mutate(
rank = row_number(desc(floor))
)
## enhanced method
df <- long %>%
mutate(
round = round(actual),
floor = floor(actual),
fraction = actual - floor(actual)
) %>%
rowwise() %>%
mutate(
random = fraction + runif(1,0.001,0.01)
)
df %>%
mutate(
rank = row_number(desc(floor))
)
row_number(desc(df$rando
)
)0
class(df)
df
## enhanced method
df <- long %>%
mutate(
round = round(actual),
floor = floor(actual),
fraction = actual - floor(actual)
) %>%
rowwise() %>%
mutate(
random = fraction + runif(1,0.001,0.01)
)  %>%
ungroup() %>%
mutate(
rank = row_number(desc(floor))
)
df
## enhanced method
df <- long %>%
mutate(
round = round(actual),
floor = floor(actual),
fraction = actual - floor(actual)
) %>%
rowwise() %>%
mutate(
random = fraction + runif(1,0.001,0.01)
)  %>%
ungroup() %>%
mutate(
rank = row_number(desc(random))
)
df
# get totals
tot<-df %>%
select(actual:floor) %>%
summarise_all(funs(sum)) %>%
mutate(missing = actual - floor)
tot
# final adjustment and output
tot <- df %>%
mutate(adjusted = ifelse(rank<=tot$missing,floor+1,floor)) %>%
summarise(whole =sum(adjusted)) %>%
crossing(tot,.)
tot
datatable
